var n=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var u=n((B,c)=>{c.exports=e=>{}});var g=n((w,a)=>{a.exports={APP_DEBUG_PREFIX:"auth-db"}});var o=n(($,m)=>{var{appDebugger:l}=require("@app/lib/utils"),{APP_DEBUG_PREFIX:p}=g();m.exports={info:l(`${p}:info`),error:l(`${p}:error`)}});var h=n((F,d)=>{var C=o(),_=["DEBUG","MONGO_URI","MONGO_TIMEOUTMS"],b=()=>_.find(r=>{if(!process.env[r])return C.error(`Missing required env var: ${r}`),!0});d.exports=()=>{let e=!0;if(b())throw e=!1,new Error("RuntimeError: missing required Env");e||process.exit(1)}});var M=n((V,q)=>{var y=u(),T=h();q.exports={config:y,sanity:T}});var f=n((X,O)=>{var{Schema:G}=require("mongoose"),E=new G({fullname:{type:String,required:!0,minLength:3,maxLength:30},email:{type:String,required:!0,minLength:5,maxLength:255,unique:!0},password:{type:String,required:!0,minLength:8,maxLength:1024},roles:{type:[String],required:!0,validate:{validator:e=>Array.isArray(e)&&e.length>0,message:"Roles must contain at least one role."},enum:["admin","user"]}});E.methods.getAccessTokenPayload=function(){return{email:this.email,roles:this.roles}};O.exports=E});var x=n((k,D)=>{var U=require("mongoose"),s=o(),i,N=(e,r)=>{try{let t=U.createConnection(e,r);return t.on("close",()=>s.info("MongoDb: Connection CLOSED")),t.on("connected",()=>s.info("MongoDB: CONNECTED")),t}catch{s.error("Could not connect to MongoDB"),process.env.ENV!=="development"&&process.exit(1)}},S=()=>{let e={serverSelectionTimeoutMS:process.env.MONGO_TIMEOUTMS||3e4,connectTimeoutMS:process.env.MONGO_TIMEOUTMS||3e4};return i=N(process.env.MONGO_URI,e),i},P=()=>i||S();D.exports={connect:S,getClient:P}});require("@dotenvx/dotenvx").config();var v=M(),I=f();v.config(__dirname);v.sanity();var{connect:L}=x(),R=L();R.model("User",I);
