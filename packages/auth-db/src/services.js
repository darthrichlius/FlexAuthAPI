var c=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var a=c((E,o)=>{o.exports={APP_DEBUG_PREFIX:"auth-db"}});var f=c((I,d)=>{var{appDebugger:u}=require("@app/lib/utils"),{APP_DEBUG_PREFIX:l}=a();d.exports={info:u(`${l}:info`),error:u(`${l}:error`)}});var P=c((O,b)=>{var{dbDebugger:m}=f();function g(t,e={}){let s=Object.keys(e);return s.length&&(s.includes("select")&&t.select(e.select),s.includes("and")&&t.and(e.and),s.includes("or")&&t.or(e.or),s.includes("sort")&&t.sort(e.sort),s.includes("limit")&&t.limit(e.limit),s.includes("count")&&t.countDocuments(),s.includes("skip")&&t.skip(e.skip)),t}function p(t={}){let e=Object.keys(t);if(e.length&&e.includes("select")&&e.includes("count"))throw new Error("Inconsistent query")}b.exports={create:async(t,e)=>{let i=await new t(e).save();m(i)},getItems:async(t,e={},s={})=>{p(s);let i=t.find(e);return g(i,s),await i.exec()},getItemsByPage:async(t,e,s={},i={})=>{p(i);let{pageSize:n,pageNumber:h}=e,r=t.find(s),k={...i,limit:n,skip:(h-1)*n};g(r,k);let w=await r.exec();m(w)}}});var x=P();module.exports={resourceManager:x};
