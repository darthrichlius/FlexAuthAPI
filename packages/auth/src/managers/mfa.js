const otplib=require("otplib"),crypto=require("crypto"),generateMfaBackupCodes=()=>{const e=[];for(let t=0;t<10;t++)e.push(crypto.randomBytes(4).toString("hex"));return e},generateMfaSecret=()=>otplib.authenticator.generateSecret(),isValidTotpCode=(e,t)=>otplib.authenticator.check(t,e.mfaSecret),isValidBackupCode=(e,t)=>{const o=e.mfaBackupCodes;return o&&o.length?o.find(r=>r===t)?1:-1:0},retireBackupCode=(e,t)=>e.mfaBackupCodes.filter(o=>o!==t),enableTotpMfa=(e,t=!1)=>(e.mfaVerified=!0,e.mfaEnabled=!0,e.mfaMethod="totp",t&&(e.mfaBackupCodes=generateMfaBackupCodes(),e.mfaSecret=generateMfaSecret()),e),enableForUser=(e,t="totp")=>{switch(t){case"totp":return enableTotpMfa(e);default:return}},disableForUser=e=>(e.mfaEnabled=!1,e.mfaMethod="",e),setupForUser=(e,t="totp")=>{switch(t){case"totp":return enableTotpMfa(e,!0);default:return}},resetForUser=e=>(e.mfaVerified=!1,e.mfaEnabled=!1,e.mfaMethod="",e.mfaBackupCodes=null,e.mfaSecret="",e);module.exports={disableForUser,enableForUser,generateMfaBackupCodes,generateMfaSecret,isValidBackupCode,isValidTotpCode,retireBackupCode,resetForUser,setupForUser};
