const _=require("lodash"),router=require("express").Router(),{validate:validateSchema}=require("@app/lib/api/helpers"),{asyncError}=require("@app/lib/middlewares"),{mfaDisableSchema,mfaEnableSchema,mfaSetupSchema,mfaToggleSchema}=require("../models/user"),{mfaManager,userManager}=require("../managers"),{authenticated,authorized,hasSetupMFA}=require("../middlewares/auth"),putAuthMFA=async(e,t)=>{const{mfaMethod:a}=e.body;let u=validateSchema(mfaSetupSchema,e.body);if(u)return t.status(400).send(JSON.stringify(u));let r=e.user;mfaManager.setupForUser(r,a);const s=await userManager.update(r);return t.json(_.pick(s,["_id","fullname","email","mfaVerified","mfaEnabled","mfaMethod","mfaSecret","mfaBackupCodes","roles"]))},patchAuthMFA=async(e,t)=>{const{mfaEnabled:a,mfaMethod:u}=e.body;let r=validateSchema(mfaToggleSchema,e.body);if(r||(r=validateSchema(a===!0?mfaEnableSchema:mfaDisableSchema,e.body),r))return t.status(400).send(JSON.stringify(r));let s=e.user;return a===!0?mfaManager.enableForUser(s,u):mfaManager.disableForUser(s),await userManager.update(s),t.sendStatus(204)},deleteAuthMFA=async(e,t)=>{let a=e.user;return a=mfaManager.resetForUser(a),await userManager.update(a),t.sendStatus(204)};router.put("/",[authenticated,authorized(["user"])],asyncError(putAuthMFA)),router.patch("/",[authenticated,authorized(["user"]),hasSetupMFA],asyncError(patchAuthMFA)),router.delete("/",[authenticated,authorized(["user"]),hasSetupMFA],asyncError(deleteAuthMFA)),module.exports=router;
