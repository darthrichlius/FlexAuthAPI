const _=require("lodash"),router=require("express").Router(),{validate:validateSchema}=require("@app/lib/api/helpers"),{asyncError}=require("@app/lib/middlewares"),{loginSchema,mfaVerifySchema,mfaLoginSchema}=require("../models/auth"),{mfaManager,passwordManager,tokenManager,userManager}=require("../managers"),{authenticated,authorized,hasSetupMFA}=require("../middlewares/auth"),postAuth=async(n,e)=>{const t=validateSchema(loginSchema,n.body);if(t)return e.status(400).send(JSON.stringify(t));const s=await userManager.exists({email:n.body.username});if(!s)return e.status(404).send("Invalid credentials");if(!await passwordManager.verify(n.body.password,s.password))return e.status(401).send("Invalid credentials");const o=s.mfaEnabled?tokenManager.generateMfaAccessTokenChallengePayload(s):tokenManager.generateAccessTokenPayload(s),a=tokenManager.createAccessToken(o,process.env.JWT_SECRET),r=s.mfaEnabled?{mfaAccessToken:a,mfaMethod:s.mfaMethod}:{accessToken:a};return e.send(r)},postAuthMFAVerify=async(n,e)=>{let t=n.user;const{mfaToken:s}=n.body,i=validateSchema(mfaVerifySchema,n.body);if(i)return e.status(400).send(JSON.stringify(i));let o=!1,a=mfaManager.isValidTotpCode(t,s);if(!a){if(o=mfaManager.isValidBackupCode(t,s),o===0)return e.status(400).send("No more backup code available");if(o=o!==-1,o){const r=mfaManager.retireBackupCode(t,s);t.mfaBackupCodes=r,await userManager.update(t)}}return o||a?e.sendStatus(200):e.status(401).send("Invalid 2FA token or backup code")},postAuthMFALogin=async(n,e)=>{const t=validateSchema(mfaLoginSchema,n.body);if(t)return e.status(400).send(JSON.stringify(t));const{mfaAccessToken:s,mfaToken:i}=n.body,o=tokenManager.isValidMfaAccessToken(s,process.env.JWT_SECRET);if(!o)return e.status(400).send("Access denied. Bad token");const a=await userManager.exists({email:o.email});if(!a)return e.status(404).send("Invalid credentials");let r=!1,c=mfaManager.isValidTotpCode(a,i);if(!c){if(r=mfaManager.isValidBackupCode(a,i),r===0)return e.status(400).send("No more backup code available");if(r=r!==-1,r){const l=mfaManager.retireBackupCode(a,i);a.mfaBackupCodes=l,await userManager.update(a)}}if(!(r||c))return e.status(401).send("Invalid 2FA token or backup code");const d=tokenManager.generateAccessTokenPayload(a),u={accessToken:tokenManager.createAccessToken(d,process.env.JWT_SECRET)};return e.send(u)};router.post("/sessions",asyncError(postAuth)),router.post("/mfa/sessions",asyncError(postAuthMFALogin)),router.post("/mfa/verify",[authenticated,authorized(["user"]),hasSetupMFA],asyncError(postAuthMFAVerify)),module.exports=router;
