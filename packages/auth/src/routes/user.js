const _=require("lodash"),router=require("express").Router(),{validate:validateSchema}=require("@app/lib/api/helpers"),{authenticated,authorized}=require("../middlewares/auth"),{registerSchema}=require("../models/user"),{mfaManager,passwordManager,tokenManager,userManager}=require("../managers"),{asyncError}=require("@app/lib/middlewares"),getMe=async(e,t)=>{const a=e.user;return t.json(_.pick(a,["_id","fullname","email","mfaVerified","mfaEnabled","mfaMethod","roles"]))},getList=async(e,t)=>{let a=await userManager.list();return a&&a.length&&(a=a.map(o=>_.pick(o,["_id","fullname","email"]))),t.json(a)},postUser=async(e,t)=>{const a=validateSchema(registerSchema,e.body);if(a)return t.status(400).send(JSON.stringify(a));if(await userManager.exists({email:e.body.email}))return t.status(400).send("A user with that email already exists");const c=await passwordManager.hash(e.body.password);e.body.password=c;let r=_.pick(e.body,["fullname","email","password"]),s={mfaEnabled:!1};if(e.body.mfaEnabled){const u=mfaManager.generateMfaBackupCodes(),m=mfaManager.generateMfaSecret();s={...s,mfaVerified:!0,mfaEnabled:!0,mfaSecret:m,mfaMethod:"totp",mfaBackupCodes:u}}r={...r,...s};const i=await userManager.register(r);let n=_.pick(i,["_id","fullname","email","mfaSecret"]);e.body.mfaEnabled&&(n={...n,...s});const d=tokenManager.generateAccessTokenPayload(i),l=await tokenManager.createAccessToken(d,process.env.JWT_SECRET);return t.header("x-app-auth-access-token",l).send(n)};router.get("/me",[authenticated,authorized(["user"])],asyncError(getMe)),router.get("/",authenticated,asyncError(getList)),router.post("/",asyncError(postUser)),module.exports=router;
