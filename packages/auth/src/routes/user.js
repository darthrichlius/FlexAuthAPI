const _=require("lodash"),router=require("express").Router(),{validate:validateSchema}=require("@app/lib/api/helpers"),{authenticated,authorized}=require("../middlewares/auth"),{registerSchema}=require("../model/user"),{userManager,passwordManager,tokenManager}=require("../managers"),{asyncError}=require("@app/lib/middlewares"),getMe=async(e,s)=>{const a=e.user;return s.json(_.pick(a,["_id","fullname","email","roles"]))},getList=async(e,s)=>{const a=await userManager.list();return s.json(a)},postUser=async(e,s)=>{const a=validateSchema(registerSchema,e.body);if(a)return s.status(400).send(JSON.stringify(a));if(await userManager.exists({email:e.body.email}))return s.status(400).send("A user with that email already exists");const r=await passwordManager.hash(e.body.password);e.body.password=r;const t=await userManager.register(_.pick(e.body,["fullname","email","password"])),o=_.pick(t,["_id","fullname","email"]),n=tokenManager.defineAccessTokenPayload(t),i=await tokenManager.createAccessToken(n,process.env.JWT_SECRET);return s.header("x-app-auth-access-token",i).send(o)};router.get("/me",[authenticated,authorized(["user"])],asyncError(getMe)),router.get("/",authenticated,asyncError(getList)),router.post("/",asyncError(postUser)),module.exports=router;
